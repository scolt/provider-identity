{"version":3,"sources":["components/modal/Modal.js","store/reducers/authorizationReducer.js","store/selectors/authorizationSelectors.js","components/registration-form/RegistrationForm.js","components/login-form/LoginForm.js","components/code-form/CodeForm.js","components/authorization-modal/AuthorizationModal.js","components/app/App.js","store/epics/registrationEpics.js","store/store.js","index.js"],"names":["Modal","open","children","onClose","onOpen","useState","isOpen","setIsOpen","handler","useCallback","useEffect","document","body","addEventListener","removeEventListener","className","onClick","e","stopPropagation","validateUser","createAction","setActiveTab","setRegistrationServerErrors","clearRegistrationServerErrors","setRegistrationServerValidationStatues","authorizationReducer","createReducer","activeTab","registrationFormErrors","registrationFormValidationInProgress","type","state","action","payload","getAuthState","auth","getRegistrationErrors","createSelector","getActiveAuthorizationMode","registrationValidationSchema","Yup","shape","firstName","min","max","required","lastName","email","password","confirmPassword","oneOf","RegistrationForm","dispatch","useDispatch","formikRef","useRef","errors","useSelector","current","Object","values","length","setErrors","renderTextGroup","name","error","label","handleChange","htmlFor","id","onChange","ref","innerRef","initialValues","validateOnChange","validateOnBlur","validationSchema","onSubmit","setSubmitting","handleSubmit","loginValidationSchema","LoginForm","setTimeout","alert","JSON","stringify","codeValidationSchema","code","CodeForm","AuthorizationModal","activeScreen","handleNewScreen","App","signInModalOpen","setSignInModalOpen","title","href","registrationEpics","action$","pipe","ofType","mergeMap","ajax","post","switchMap","response","actions","status","push","reducer","combineReducers","epics","combineEpics","epicMiddleware","createEpicMiddleware","store","configureStore","middleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ca021b06.chunk.js","sourcesContent":["import './Modal.scss';\r\nimport { useEffect, useState, useCallback } from 'react';\r\n\r\nconst Modal = ({open, children, onOpen, onClose}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handler = useCallback(() => {\r\n    setIsOpen(false);\r\n    onClose?.();\r\n  }, [onClose]);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      document.body.addEventListener('click', handler);\r\n    } else {\r\n      document.body.removeEventListener('click', handler);\r\n    }\r\n    return () => document.body.removeEventListener('click', handler)\r\n  }, [open, handler]);\r\n\r\n  useEffect(() => {\r\n    setIsOpen(open);\r\n  }, [open])\r\n\r\n  const preventClick = (e) => e.stopPropagation();\r\n\r\n  return isOpen ? <div className=\"modal\">\r\n    <div className=\"modal-content\" onClick={preventClick}>\r\n      {children}\r\n    </div>\r\n  </div> : null;\r\n}\r\n\r\nexport default Modal;\r\n","import { createAction, createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  activeTab: 'sign-in',\r\n  registrationFormErrors: {},\r\n  registrationFormValidationInProgress: false,\r\n};\r\n\r\nexport const validateUser = createAction('api/validate-user');\r\nexport const setActiveTab = createAction('auth/set-active-tab');\r\nexport const setRegistrationServerErrors = createAction('registration/set-registration-errors');\r\nexport const clearRegistrationServerErrors = createAction('registration/clear-registration-errors');\r\nexport const setRegistrationServerValidationStatues = createAction('registration/set-registration-validation');\r\n\r\nexport const authorizationReducer = createReducer(initialState, {\r\n  [validateUser.type]: (state, action) => {\r\n    return {...state, registrationFormValidationInProgress: true};\r\n  },\r\n  [setActiveTab.type]: (state, action) => {\r\n    return {...state, activeTab: action.payload};\r\n  },\r\n  [setRegistrationServerErrors.type]: (state, action) => {\r\n    return {...state, registrationFormErrors: action.payload};\r\n  },\r\n  [clearRegistrationServerErrors.type]: (state, action) => {\r\n    return {...state, registrationFormErrors: {}};\r\n  },\r\n  [setRegistrationServerValidationStatues.type]: (state, action) => {\r\n    return {...state, registrationFormValidationInProgress: action.payload};\r\n  }\r\n});\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getAuthState = (state) => state.auth;\r\n\r\nexport const getRegistrationErrors = createSelector(\r\n  getAuthState,\r\n  (auth) => auth.registrationFormErrors,\r\n)\r\n\r\nexport const getActiveAuthorizationMode = createSelector(\r\n  getAuthState,\r\n  (auth) => auth.activeTab,\r\n)\r\n","import { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport './RegistrationForm.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { validateUser } from '../../store/reducers/authorizationReducer';\r\nimport { getRegistrationErrors } from '../../store/selectors/authorizationSelectors';\r\nimport { useRef } from 'react';\r\n\r\nconst registrationValidationSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(20, 'Too Long!')\r\n    .required('Required'),\r\n  lastName: Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Required'),\r\n  email: Yup.string().email('Invalid email').required('Required'),\r\n  password: Yup.string()\r\n    .min(8, 'Password should include at least 8 characters')\r\n    .max(16, 'Password should be no more than 16 characters')\r\n    .required('Required'),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    .required(),\r\n});\r\n\r\nexport const RegistrationForm = () => {\r\n  const dispatch = useDispatch();\r\n  const formikRef = useRef();\r\n  const errors = useSelector(getRegistrationErrors);\r\n  if (formikRef.current && Object.values(errors).length > 0) {\r\n    formikRef.current.setErrors(errors);\r\n  }\r\n\r\n  const registrationForm = {\r\n    email: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    confirmPassword: '',\r\n    password: '',\r\n  }\r\n\r\n  const renderTextGroup = (name, values, error, label, type, handleChange) =>\r\n    <div className={`form-group ${error && 'error-group'}`}>\r\n      <label htmlFor={`register_${name}`}>\r\n        {error ? <i className=\"fas fa-exclamation-triangle\"><span className=\"error\">{error}</span></i> : null }\r\n        {label}\r\n      </label>\r\n      <input id={`register_${name}`} type={type} name={name} onChange={handleChange}/>\r\n    </div>\r\n\r\n  return <div className=\"auth-form register\" ref={formikRef}>\r\n    <div className=\"form-header\">\r\n      <h1>Account Registration</h1>\r\n    </div>\r\n\r\n    <Formik\r\n      innerRef={formikRef}\r\n      initialValues={registrationForm}\r\n      validateOnChange={false}\r\n      validateOnBlur={false}\r\n      validationSchema={registrationValidationSchema}\r\n      onSubmit={(values, {setSubmitting}) => {\r\n        dispatch(validateUser(values));\r\n      }}\r\n    >\r\n      {({\r\n          values,\r\n          errors,\r\n          handleSubmit,\r\n          handleChange,\r\n        }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"hidden\" name=\"redirect-url\"/>\r\n          {renderTextGroup('firstName', values.firstName, errors.firstName, 'First Name', 'text', handleChange)}\r\n          {renderTextGroup('lastName', values.lastName, errors.lastName, 'Last Name', 'text', handleChange)}\r\n          {renderTextGroup('email', values.email, errors.email, 'Email Address', 'text', handleChange)}\r\n          {renderTextGroup('password', values.password, errors.password, 'Password', 'password', handleChange)}\r\n          {renderTextGroup('confirmPassword', values.confirmPassword, errors.confirmPassword, 'Confirm Password', 'password', handleChange)}\r\n\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\">Register</button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik></div>\r\n}\r\n","import { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst loginValidationSchema = Yup.object().shape({\r\n  email: Yup.string().email('Invalid email').required('Required'),\r\n  password: Yup.string()\r\n    .min(8, 'Password should include at least 8 characters')\r\n    .max(16, 'Password should be no more than 16 characters')\r\n    .required('Required'),\r\n});\r\n\r\nexport const LoginForm = () => {\r\n  const loginForm = {\r\n    email: '',\r\n    password: '',\r\n  }\r\n\r\n  const renderTextGroup = (name, error, label, type, handleChange) =>\r\n    <div className={`form-group ${error && 'error-group'}`}>\r\n      <label htmlFor={`register_${name}`}>\r\n        {error ? <i className=\"fas fa-exclamation-triangle\"><span className=\"error\">{error}</span></i> : null }\r\n        {label}\r\n      </label>\r\n      <input id={`register_${name}`} type={type} name={name} onChange={handleChange}/>\r\n    </div>\r\n\r\n  return <div className=\"auth-form sign-in\">\r\n    <div className=\"form-header\">\r\n      <h1>Account Sign In</h1>\r\n    </div>\r\n\r\n    <Formik\r\n      initialValues={loginForm}\r\n      validateOnChange={false}\r\n      validateOnBlur={false}\r\n      validationSchema={loginValidationSchema}\r\n      onSubmit={(values, {setSubmitting}) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({\r\n          values,\r\n          errors,\r\n          handleSubmit,\r\n          handleChange,\r\n        }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"hidden\" name=\"redirect-url\"/>\r\n          {renderTextGroup('email', errors.email, 'Email Address', 'text', handleChange)}\r\n          {renderTextGroup('password', errors.password, 'Password', 'password', handleChange)}\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\">Sign In</button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik></div>\r\n}\r\n","import { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst codeValidationSchema = Yup.object().shape({\r\n  code: Yup.string()\r\n    .min(2, 'Password should include at least 8 characters')\r\n    .max(10, 'Password should be no more than 16 characters')\r\n    .required('Required'),\r\n});\r\n\r\nexport const CodeForm = () => {\r\n  const codeForm = {\r\n    code: '',\r\n  }\r\n\r\n  const renderTextGroup = (name, error, label, type, handleChange) =>\r\n    <div className={`form-group ${error && 'error-group'}`}>\r\n      <label htmlFor={`code_${name}`}>\r\n        {error ? <i className=\"fas fa-exclamation-triangle\"><span className=\"error\">{error}</span></i> : null }\r\n        {label}\r\n      </label>\r\n      <input id={`code_${name}`} type={type} name={name} onChange={handleChange}/>\r\n    </div>\r\n\r\n  return <div className=\"auth-form full-size\">\r\n    <div className=\"form-header\">\r\n      <h1>Code confirmation</h1>\r\n    </div>\r\n    <p className=\"auth-info\">\r\n      We send the code to your email.\r\n      Please enter it in the field below for confirmation.\r\n    </p>\r\n\r\n    <Formik\r\n      initialValues={codeForm}\r\n      validateOnChange={false}\r\n      validateOnBlur={false}\r\n      validationSchema={codeValidationSchema}\r\n      onSubmit={(values, {setSubmitting}) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({\r\n          values,\r\n          errors,\r\n          handleSubmit,\r\n          handleChange,\r\n        }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"hidden\" name=\"redirect-url\"/>\r\n          {renderTextGroup('code', errors.email, 'Code', 'text', handleChange)}\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\">Confirm</button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik></div>\r\n}\r\n","import { RegistrationForm } from '../registration-form/RegistrationForm';\r\nimport { LoginForm } from '../login-form/LoginForm';\r\nimport './AuthorizationModal.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setActiveTab } from '../../store/reducers/authorizationReducer';\r\nimport { getActiveAuthorizationMode } from '../../store/selectors/authorizationSelectors';\r\nimport { CodeForm } from '../code-form/CodeForm';\r\n\r\nexport const AuthorizationModal = () => {\r\n  const dispatch = useDispatch();\r\n  const activeScreen = useSelector(getActiveAuthorizationMode);\r\n  const handleNewScreen = (type) => dispatch(setActiveTab(type));\r\n\r\n  return <div className={`authorization-modal is-${activeScreen}-active`}>\r\n    <div className={'authorization-modal-content'}>\r\n      <LoginForm />\r\n      <div className=\"auth-toggle register-toggle\" onClick={() => handleNewScreen('register')}><span>Register</span></div>\r\n      <div className=\"auth-toggle sign-in-toggle\" onClick={() => handleNewScreen('sign-in')}><span>Sign In</span></div>\r\n      <RegistrationForm />\r\n      <CodeForm />\r\n    </div>\r\n  </div>\r\n}\r\n","import './App.scss';\nimport Modal from '../modal/Modal';\nimport { useState } from 'react';\nimport { AuthorizationModal } from '../authorization-modal/AuthorizationModal';\nimport { useDispatch } from 'react-redux';\nimport { setActiveTab } from '../../store/reducers/authorizationReducer';\n\nconst App = () => {\n  const [signInModalOpen, setSignInModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const openSignInModal = () => setSignInModalOpen(true);\n  const closeSignInModal = () => {\n    dispatch(setActiveTab('sign-in'));\n    setSignInModalOpen(false);\n  };\n\n  return (\n    <div className=\"main\">\n      <div className=\"background\"/>\n      <div className=\"login-container\">\n        <h1>Login / Sign Up<span className=\"application-name\">Interview Platform</span></h1>\n        <section className=\"social-links\">\n          <button\n            id=\"manual-login\"\n            className=\"btn-link\"\n            title=\"Use login/password for authorization\"\n            onClick={openSignInModal}\n          >\n            <i className=\"fas fa-sign-in-alt\" />\n          </button>\n          <a href=\"/ivwa/facebook\" title=\"Facebook\"><i className=\"fab fa-facebook-square\"></i></a>\n          <a href=\"/ivwa/vk\" title=\"VK\"><i className=\"fab fa-vk\"></i></a>\n          <a href=\"/ivwa/github\" title=\"Github\"><i className=\"fab fa-github-square\"></i></a>\n        </section>\n      </div>\n      <Modal open={signInModalOpen} onClose={closeSignInModal}>\n        <AuthorizationModal />\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import { ajax } from 'rxjs/ajax';\r\nimport { ofType } from 'redux-observable';\r\nimport { mergeMap, switchMap } from 'rxjs/operators';\r\nimport {\r\n  clearRegistrationServerErrors,\r\n  setActiveTab,\r\n  setRegistrationServerErrors,\r\n  validateUser\r\n} from '../reducers/authorizationReducer';\r\n\r\nconst validateUserEpic = action$ => action$.pipe(\r\n  ofType(validateUser),\r\n  mergeMap(action =>\r\n    ajax.post(`validate`, action.payload).pipe(\r\n      switchMap(({response}) => {\r\n        const actions = []\r\n        if (response.status === 'success') {\r\n          actions.push(\r\n            clearRegistrationServerErrors(),\r\n            setActiveTab('confirmation-code')\r\n          );\r\n        }\r\n        if (response.status === 'validation-error') {\r\n          actions.push(setRegistrationServerErrors(response.errors));\r\n        }\r\n        return actions;\r\n      })\r\n    )\r\n  )\r\n);\r\n\r\nexport const registrationEpics = [validateUserEpic]\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\r\nimport { registrationEpics } from './epics/registrationEpics';\r\nimport { authorizationReducer } from './reducers/authorizationReducer';\r\n\r\nconst reducer = combineReducers({\r\n  auth: authorizationReducer\r\n});\r\n\r\nconst epics = combineEpics(\r\n  ...registrationEpics\r\n);\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware: [epicMiddleware]\r\n});\r\n\r\nepicMiddleware.run(epics);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/App';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}